// randomized dining philosophers [LR81]
// three philosophers

mdp

const int flock = 0;
const int torus = 1;
const int none = 0;
const double SF = 1/4900;
const double ST = 1/8000;

module bistate

	s: [0..1] init 0;
	m: [0..100] init none;

	[Fm10] (s = flock) & (m = none) -> (s' = flock) & (m' = 10); 
	[Fm20] (s = flock) & (m = none) -> (s' = flock) & (m' = 20);
	[Fm30] (s = flock) & (m = none) -> (s' = flock) & (m' = 30);
	[Fm40] (s = flock) & (m = none) -> (s' = flock) & (m' = 40); 
	[Fm50] (s = flock) & (m = none) -> (s' = flock) & (m' = 50);
	[Fm60] (s = flock) & (m = none) -> (s' = flock) & (m' = 60);
	[Fm70] (s = flock) & (m = none) -> (s' = flock) & (m' = 70);
	[Fm80] (s = flock) & (m = none) -> (s' = flock) & (m' = 80);
	[Fm90] (s = flock) & (m = none) -> (s' = flock) & (m' = 90);
	[Fm100] (s = flock) & (m = none) -> (s' = flock) & (m' = 100);

	[FtoT] (s = flock) & (m >= 10) & (m < 70) ->       SF*m*m:(s' = torus) & (m' = none) + 
	                                             1 - (SF*m*m):(s' = flock) & (m' = m + 5); 
	[FtoT] (s = flock) & (m >= 70) -> (s' = torus) & (m' = none); 


	[Tm10] (s = torus) & (m = none) -> (s' = torus) & (m' = 10); 
	[Tm20] (s = torus) & (m = none) -> (s' = torus) & (m' = 20);
	[Tm30] (s = torus) & (m = none) -> (s' = torus) & (m' = 30);
	[Tm40] (s = torus) & (m = none) -> (s' = torus) & (m' = 40); 
	[Tm50] (s = torus) & (m = none) -> (s' = torus) & (m' = 50);
	[Tm60] (s = torus) & (m = none) -> (s' = torus) & (m' = 60);
	[Tm70] (s = torus) & (m = none) -> (s' = torus) & (m' = 70);
	[Tm80] (s = torus) & (m = none) -> (s' = torus) & (m' = 80);
	[Tm90] (s = torus) & (m = none) -> (s' = torus) & (m' = 90);
	[Tm100] (s = torus) & (m = none) -> (s' = torus) & (m' = 100);

	[TtoF] (s = torus) & (m >= 10) & (m < 30) ->       ST*(m-10)*(m-10)*(m-10):(s' = flock) & (m' = none) + 
	                                             1 - (ST*(m-10)*(m-10)* (m-10)):(s' = torus) & (m' = m + 5); 
	[TtoF] (s = torus) & (m >= 30) -> (s' = flock) & (m' = none); 

endmodule

rewards "numTtoF"
	[FtoT] true : 1;
endrewards

rewards "numFtoT"
	[TtoF] true : 1;
endrewards


//init (m = none) endinit

label "flock" = (s = flock);
label "torus" = (s = torus);
label "none" = (m = none);
label "m100" = (m = 100);
label "m90" = (m = 90);
label "m80" = (m = 80);
label "m70" = (m = 70);
label "m60" = (m = 60);
label "m50" = (m = 50);
label "m40" = (m = 40);
label "m30" = (m = 30);
label "m20" = (m = 20);
label "m10" = (m = 10);